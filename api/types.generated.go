// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"fmt"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gofiber/fiber/v2"
)

// Defines values for RequestGenerateVerificationCodeChannel.
const (
	Email  RequestGenerateVerificationCodeChannel = "email"
	Mobile RequestGenerateVerificationCodeChannel = "mobile"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Email        string `json:"email" validate:"email"`
	FirstName    string `json:"firstName" validate:"required,min=2,max=50"`
	LastName     string `json:"lastName"`
	MobileNumber string `json:"mobileNumber" validate:"required,min=6,max=20"`
}

// NewUserResponse defines model for NewUserResponse.
type NewUserResponse struct {
	Email             string  `json:"email" validate:"email"`
	FirstName         string  `json:"firstName" validate:"required,min=2,max=50"`
	LastName          string  `json:"lastName"`
	MobileNumber      string  `json:"mobileNumber" validate:"required,min=6,max=20"`
	TemporaryPassword *string `json:"temporaryPassword,omitempty"`
	UserId            *string `json:"userId,omitempty"`
}

// RequestChangePassword defines model for RequestChangePassword.
type RequestChangePassword struct {
	Newpassword      string `json:"newpassword" validate:"required,min=8, max=30"`
	Oldpassword      string `json:"oldpassword" validate:"required"`
	VerificationCode string `json:"verificationCode" validate:"required,min=6"`
}

// RequestGenerateVerificationCode defines model for RequestGenerateVerificationCode.
type RequestGenerateVerificationCode struct {
	Channel RequestGenerateVerificationCodeChannel `json:"channel"`
}

// RequestGenerateVerificationCodeChannel defines model for RequestGenerateVerificationCode.Channel.
type RequestGenerateVerificationCodeChannel string

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// ChangeUserPasswordJSONRequestBody defines body for ChangeUserPassword for application/json ContentType.
type ChangeUserPasswordJSONRequestBody = RequestChangePassword

// GenerateVerificationCodeJSONRequestBody defines body for GenerateVerificationCode for application/json ContentType.
type GenerateVerificationCodeJSONRequestBody = RequestGenerateVerificationCode

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /user)
	CreateUser(c *fiber.Ctx) error

	// (GET /user/{userid})
	GetUserProfile(c *fiber.Ctx, userid string) error

	// (PUT /user/{userid}/changepassword)
	ChangeUserPassword(c *fiber.Ctx, userid string) error

	// (PUT /user/{userid}/changepassword/verification-code)
	GenerateVerificationCode(c *fiber.Ctx, userid string) error

	// (POST /user/{userid}/checkin)
	UserCheckIn(c *fiber.Ctx, userid string) error

	// (POST /user/{userid}/checkout)
	UserCheckOut(c *fiber.Ctx, userid string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	return siw.Handler.CreateUser(c)
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameter("simple", false, "userid", c.Params("userid"), &userid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userid: %w", err).Error())
	}

	return siw.Handler.GetUserProfile(c, userid)
}

// ChangeUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserPassword(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameter("simple", false, "userid", c.Params("userid"), &userid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userid: %w", err).Error())
	}

	return siw.Handler.ChangeUserPassword(c, userid)
}

// GenerateVerificationCode operation middleware
func (siw *ServerInterfaceWrapper) GenerateVerificationCode(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameter("simple", false, "userid", c.Params("userid"), &userid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userid: %w", err).Error())
	}

	return siw.Handler.GenerateVerificationCode(c, userid)
}

// UserCheckIn operation middleware
func (siw *ServerInterfaceWrapper) UserCheckIn(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameter("simple", false, "userid", c.Params("userid"), &userid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userid: %w", err).Error())
	}

	return siw.Handler.UserCheckIn(c, userid)
}

// UserCheckOut operation middleware
func (siw *ServerInterfaceWrapper) UserCheckOut(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid string

	err = runtime.BindStyledParameter("simple", false, "userid", c.Params("userid"), &userid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userid: %w", err).Error())
	}

	return siw.Handler.UserCheckOut(c, userid)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/user", wrapper.CreateUser)

	router.Get(options.BaseURL+"/user/:userid", wrapper.GetUserProfile)

	router.Put(options.BaseURL+"/user/:userid/changepassword", wrapper.ChangeUserPassword)

	router.Put(options.BaseURL+"/user/:userid/changepassword/verification-code", wrapper.GenerateVerificationCode)

	router.Post(options.BaseURL+"/user/:userid/checkin", wrapper.UserCheckIn)

	router.Post(options.BaseURL+"/user/:userid/checkout", wrapper.UserCheckOut)

}
