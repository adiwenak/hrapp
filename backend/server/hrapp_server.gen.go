// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Login
	// (POST /login)
	Login(c *fiber.Ctx) error
	// Logout
	// (POST /logout)
	Logout(c *fiber.Ctx) error
	// User check in
	// (POST /me/checkIn)
	UserCheckIn(c *fiber.Ctx) error
	// User check out
	// (POST /me/checkOut)
	UserCheckOut(c *fiber.Ctx) error
	// Get current user profile
	// (GET /me/profile)
	GetCurrentUserProfile(c *fiber.Ctx) error
	// Change user password
	// (PUT /me/selfservice/changepassword)
	ChangeUserPassword(c *fiber.Ctx) error
	// Self service verification code
	// (PUT /me/selfservice/changepassword/verificationCode)
	GenerateVerificationCode(c *fiber.Ctx) error
	// Create organisation
	// (POST /organisations)
	CreateOrganisation(c *fiber.Ctx) error
	// Get users
	// (GET /users)
	GetUsers(c *fiber.Ctx) error
	// Create user
	// (POST /users)
	CreateUser(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *fiber.Ctx) error {

	return siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *fiber.Ctx) error {

	return siw.Handler.Logout(c)
}

// UserCheckIn operation middleware
func (siw *ServerInterfaceWrapper) UserCheckIn(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.UserCheckIn(c)
}

// UserCheckOut operation middleware
func (siw *ServerInterfaceWrapper) UserCheckOut(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.UserCheckOut(c)
}

// GetCurrentUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUserProfile(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.GetCurrentUserProfile(c)
}

// ChangeUserPassword operation middleware
func (siw *ServerInterfaceWrapper) ChangeUserPassword(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.ChangeUserPassword(c)
}

// GenerateVerificationCode operation middleware
func (siw *ServerInterfaceWrapper) GenerateVerificationCode(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.GenerateVerificationCode(c)
}

// CreateOrganisation operation middleware
func (siw *ServerInterfaceWrapper) CreateOrganisation(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.CreateOrganisation(c)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.GetUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(CookieAuthScopes, []string{})

	return siw.Handler.CreateUser(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/login", wrapper.Login)

	router.Post(options.BaseURL+"/logout", wrapper.Logout)

	router.Post(options.BaseURL+"/me/checkIn", wrapper.UserCheckIn)

	router.Post(options.BaseURL+"/me/checkOut", wrapper.UserCheckOut)

	router.Get(options.BaseURL+"/me/profile", wrapper.GetCurrentUserProfile)

	router.Put(options.BaseURL+"/me/selfservice/changepassword", wrapper.ChangeUserPassword)

	router.Put(options.BaseURL+"/me/selfservice/changepassword/verificationCode", wrapper.GenerateVerificationCode)

	router.Post(options.BaseURL+"/organisations", wrapper.CreateOrganisation)

	router.Get(options.BaseURL+"/users", wrapper.GetUsers)

	router.Post(options.BaseURL+"/users", wrapper.CreateUser)

}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(ctx *fiber.Ctx) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200Response struct {
	Headers Login200ResponseHeaders
}

func (response Login200Response) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	ctx.Status(200)
	return nil
}

type LogindefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response LogindefaultJSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(ctx *fiber.Ctx) error
}

type Logout200Response struct {
}

func (response Logout200Response) VisitLogoutResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type LogoutdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response LogoutdefaultJSONResponse) VisitLogoutResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type UserCheckInRequestObject struct {
}

type UserCheckInResponseObject interface {
	VisitUserCheckInResponse(ctx *fiber.Ctx) error
}

type UserCheckIn200Response struct {
}

func (response UserCheckIn200Response) VisitUserCheckInResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type UserCheckIndefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserCheckIndefaultJSONResponse) VisitUserCheckInResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type UserCheckOutRequestObject struct {
}

type UserCheckOutResponseObject interface {
	VisitUserCheckOutResponse(ctx *fiber.Ctx) error
}

type UserCheckOut200Response struct {
}

func (response UserCheckOut200Response) VisitUserCheckOutResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type UserCheckOutdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UserCheckOutdefaultJSONResponse) VisitUserCheckOutResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type GetCurrentUserProfileRequestObject struct {
}

type GetCurrentUserProfileResponseObject interface {
	VisitGetCurrentUserProfileResponse(ctx *fiber.Ctx) error
}

type GetCurrentUserProfile200JSONResponse User

func (response GetCurrentUserProfile200JSONResponse) VisitGetCurrentUserProfileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetCurrentUserProfiledefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetCurrentUserProfiledefaultJSONResponse) VisitGetCurrentUserProfileResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type ChangeUserPasswordRequestObject struct {
	Body *ChangeUserPasswordJSONRequestBody
}

type ChangeUserPasswordResponseObject interface {
	VisitChangeUserPasswordResponse(ctx *fiber.Ctx) error
}

type ChangeUserPassword200Response struct {
}

func (response ChangeUserPassword200Response) VisitChangeUserPasswordResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type ChangeUserPassworddefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ChangeUserPassworddefaultJSONResponse) VisitChangeUserPasswordResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type GenerateVerificationCodeRequestObject struct {
	Body *GenerateVerificationCodeJSONRequestBody
}

type GenerateVerificationCodeResponseObject interface {
	VisitGenerateVerificationCodeResponse(ctx *fiber.Ctx) error
}

type GenerateVerificationCode200Response struct {
}

func (response GenerateVerificationCode200Response) VisitGenerateVerificationCodeResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type GenerateVerificationCodedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GenerateVerificationCodedefaultJSONResponse) VisitGenerateVerificationCodeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type CreateOrganisationRequestObject struct {
	Body *CreateOrganisationJSONRequestBody
}

type CreateOrganisationResponseObject interface {
	VisitCreateOrganisationResponse(ctx *fiber.Ctx) error
}

type CreateOrganisation200JSONResponse ResponseCreateOrg

func (response CreateOrganisation200JSONResponse) VisitCreateOrganisationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateOrganisationdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateOrganisationdefaultJSONResponse) VisitCreateOrganisationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type GetUsersRequestObject struct {
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(ctx *fiber.Ctx) error
}

type GetUsers200JSONResponse Users

func (response GetUsers200JSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetUsersdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetUsersdefaultJSONResponse) VisitGetUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(ctx *fiber.Ctx) error
}

type CreateUser200JSONResponse ResponseCreateUser

func (response CreateUser200JSONResponse) VisitCreateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateUserdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateUserdefaultJSONResponse) VisitCreateUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(response.StatusCode)

	return ctx.JSON(&response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Login
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Logout
	// (POST /logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// User check in
	// (POST /me/checkIn)
	UserCheckIn(ctx context.Context, request UserCheckInRequestObject) (UserCheckInResponseObject, error)
	// User check out
	// (POST /me/checkOut)
	UserCheckOut(ctx context.Context, request UserCheckOutRequestObject) (UserCheckOutResponseObject, error)
	// Get current user profile
	// (GET /me/profile)
	GetCurrentUserProfile(ctx context.Context, request GetCurrentUserProfileRequestObject) (GetCurrentUserProfileResponseObject, error)
	// Change user password
	// (PUT /me/selfservice/changepassword)
	ChangeUserPassword(ctx context.Context, request ChangeUserPasswordRequestObject) (ChangeUserPasswordResponseObject, error)
	// Self service verification code
	// (PUT /me/selfservice/changepassword/verificationCode)
	GenerateVerificationCode(ctx context.Context, request GenerateVerificationCodeRequestObject) (GenerateVerificationCodeResponseObject, error)
	// Create organisation
	// (POST /organisations)
	CreateOrganisation(ctx context.Context, request CreateOrganisationRequestObject) (CreateOrganisationResponseObject, error)
	// Get users
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Create user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *fiber.Ctx) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.UserContext(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *fiber.Ctx) error {
	var request LogoutRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.UserContext(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserCheckIn operation middleware
func (sh *strictHandler) UserCheckIn(ctx *fiber.Ctx) error {
	var request UserCheckInRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UserCheckIn(ctx.UserContext(), request.(UserCheckInRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserCheckIn")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UserCheckInResponseObject); ok {
		if err := validResponse.VisitUserCheckInResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// UserCheckOut operation middleware
func (sh *strictHandler) UserCheckOut(ctx *fiber.Ctx) error {
	var request UserCheckOutRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UserCheckOut(ctx.UserContext(), request.(UserCheckOutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UserCheckOut")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UserCheckOutResponseObject); ok {
		if err := validResponse.VisitUserCheckOutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCurrentUserProfile operation middleware
func (sh *strictHandler) GetCurrentUserProfile(ctx *fiber.Ctx) error {
	var request GetCurrentUserProfileRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUserProfile(ctx.UserContext(), request.(GetCurrentUserProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUserProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetCurrentUserProfileResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserProfileResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ChangeUserPassword operation middleware
func (sh *strictHandler) ChangeUserPassword(ctx *fiber.Ctx) error {
	var request ChangeUserPasswordRequestObject

	var body ChangeUserPasswordJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeUserPassword(ctx.UserContext(), request.(ChangeUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(ChangeUserPasswordResponseObject); ok {
		if err := validResponse.VisitChangeUserPasswordResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GenerateVerificationCode operation middleware
func (sh *strictHandler) GenerateVerificationCode(ctx *fiber.Ctx) error {
	var request GenerateVerificationCodeRequestObject

	var body GenerateVerificationCodeJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateVerificationCode(ctx.UserContext(), request.(GenerateVerificationCodeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateVerificationCode")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GenerateVerificationCodeResponseObject); ok {
		if err := validResponse.VisitGenerateVerificationCodeResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateOrganisation operation middleware
func (sh *strictHandler) CreateOrganisation(ctx *fiber.Ctx) error {
	var request CreateOrganisationRequestObject

	var body CreateOrganisationJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrganisation(ctx.UserContext(), request.(CreateOrganisationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrganisation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateOrganisationResponseObject); ok {
		if err := validResponse.VisitCreateOrganisationResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(ctx *fiber.Ctx) error {
	var request GetUsersRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx.UserContext(), request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *fiber.Ctx) error {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx.UserContext(), request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYW2/bNhT+KwK3R9nynG4YVOQhM4I0aBsHMbYXwxgY6UhiI5EsSSUxAv/3gRdbF9NO",
	"1tqbt6c4Enn4ne87Fx69oIRVnFGgSqL4BcmkgAqbn5dCMKF/cME4CEXAPE5YCvpvxkSFFYoRoepsjEKk",
	"lhzsv5CDQKsQVSAlzs1q91IqQWiOVqsQCfhaEwEpiufWZrN+sTHG7r9AorStTywndBsNVJiU2weE6HnA",
	"MCcDbTkHOoBnJfBA4dzsesQlSbHSG6wBDYhjKZ+YSL/H2tqpsCL0/F1Y4efz8Qit+v7aQ1tH+jyeihxT",
	"IrEizOM4xRUcDOnYIP3Zg9Qc40N3B19rkGpSYJrDbYu6Hkx4Ojivv4aBhns2MrKxMj3kCcbmIwiSkcRQ",
	"P3HxfhDov2wz3MYfdvjy4NinhACs4HcJJmdxWU4zFM/7ejCRX7d52mRrH5VZ5znuBf0oIEMx+iFqKkfk",
	"ykZkjl8tGlRXQEFgBX94GO3VlQJTCiaXgdaVBlGxe1LqwmDzpUGzq4w4E36WJGdUgqVpKvJ9LJG3UES+",
	"gZ9OTjue2rhek88PLEQKKs4EFsvbnangge/b9x2Sr8EfrUJnREh1c6TCF6IS77Kue5mJxZu6urdOHqYc",
	"NB0iRLUE8Q9V9YbIltfhpi1tkPTc9uWVFt2GpoLK/Hg9WDZmsBB4aZyXkNSCqOVML1xfNNgDgYtaFcY8",
	"RbF7pMuk4QnhJAEp/1TsAWhzA8GcfISl9ZrQjOntKchEEG57Kbq4vQ5YFny4Cy441xyQBKiEpq+iC46T",
	"AoLxcKT5ECWKUaEUl3EUPT09DbF5PWQij9xeGX26nlzezC4H4+FoWKiqNH4SVWpzm5MeQUiL4afhaDjS",
	"axgHijlBMTozj/S1QBWGgqjc3HqYVKZ+c11OCaO6irtLkdUWpPqNpUvLHFVAzXrMeenKbvRF2ouEFeM1",
	"qaztXugoUYN5YIuWATkejbYZntVGGhSiAnDqQmQGajCxEnZgwDOuuOGpEBKkJugc3ycyxe8DzcV59D74",
	"oBSf0nKJtpuAhphChutSHcx7e/l1ptuO1RSeOSQK0gDcmiZ6UTxfhEjWVYXFsqWPzdQ50sEMVDlIaKH3",
	"ao1ZrfaKrN//HdZPmRDry15GKoiSApKH6z2hryvJxC16CzXTjyfAyoYHjT4wPgadAPkMPQqm+yJjw8H0",
	"jfFxsiR0g6LNAhcs05fA+AXl4OHgCtSkFgKo0uZu3Wo/GQfx1rawbWeNNw5tsD79lOi+AhUklqqgboHd",
	"QbyEMpMgHkmiQ1FPee0xi9ceLewwaHRoZphj9Cb/8Pmtveq0ssI65RRqaFxLNIMyC2ZWl7eIFflmWa96",
	"O0e1o2q489T/h5pGLqdM0JYicN+89ujKWsOi3N0FNhNtM1keR7Hu8PpmeQ4ULf3x3aOFfRlMRe5QBncn",
	"WIcdStYVbB0H047oNhDq9Yy1qwPaIezITU/6fNVNxcI7sU5XO0rWvFoPFqtwbxaZ5n7cntWc86+m0H/2",
	"GuPSp7ZK9eXtDR/drwjzxUpPIyAeTT7NX1qTfRxFJUtwWTCp4nej0Qjptc685/uBDASUWINULMDNFAPp",
	"Gpr7kvAZzCc0j4GMiaDVuIMEc3xPSo18s7vTFvbY6Z7p0nX38l7xcdu6tWe1WP0VAAD//zQ/BwoeGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
