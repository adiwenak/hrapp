// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"fmt"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gofiber/fiber/v2"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// NewUser defines model for NewUser.
type NewUser struct {
	Dob       *string `json:"dob,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
}

// User defines model for User.
type User struct {
	Dob       *string `json:"dob,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	Id        int64   `json:"id"`
	LastName  *string `json:"lastName,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = NewUser

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /user)
	CreateUser(c *fiber.Ctx) error

	// (GET /user/{userid})
	GetUserProfile(c *fiber.Ctx, userid int64) error

	// (POST /user/{userid}/checkin)
	UserCheckIn(c *fiber.Ctx, userid int64) error

	// (POST /user/{userid}/checkout)
	UserCheckOut(c *fiber.Ctx, userid int64) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *fiber.Ctx) error {

	return siw.Handler.CreateUser(c)
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid int64

	err = runtime.BindStyledParameter("simple", false, "userid", c.Params("userid"), &userid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userid: %w", err).Error())
	}

	return siw.Handler.GetUserProfile(c, userid)
}

// UserCheckIn operation middleware
func (siw *ServerInterfaceWrapper) UserCheckIn(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid int64

	err = runtime.BindStyledParameter("simple", false, "userid", c.Params("userid"), &userid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userid: %w", err).Error())
	}

	return siw.Handler.UserCheckIn(c, userid)
}

// UserCheckOut operation middleware
func (siw *ServerInterfaceWrapper) UserCheckOut(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "userid" -------------
	var userid int64

	err = runtime.BindStyledParameter("simple", false, "userid", c.Params("userid"), &userid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter userid: %w", err).Error())
	}

	return siw.Handler.UserCheckOut(c, userid)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/user", wrapper.CreateUser)

	router.Get(options.BaseURL+"/user/:userid", wrapper.GetUserProfile)

	router.Post(options.BaseURL+"/user/:userid/checkin", wrapper.UserCheckIn)

	router.Post(options.BaseURL+"/user/:userid/checkout", wrapper.UserCheckOut)

}
